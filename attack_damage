#! /usr/bin/env python3


"""
Pokemon Database

Written by: <WEIHOU ZENG>
Written on: <12/04/2023>

Attack Damage

Given the name of an attacking, and a defending pokemon along with the name of a game in the Pokemon series,
display a list, ordered from lowest to highest damage,
of all the moves the attacking pokemon could use on the defending pokemon in the given game.
"""


import sys
import psycopg2
import helpers


### Constants
USAGE = f"Usage: {sys.argv[0]} <Attacking Pokemon Name> <Defending Pokemon Name> <Pokemon Game Name>"


### Globals
db = None
Attacking_Pokemon_Name = None
Defending_Pokemon_Name = None
Pokemon_Game_Name      = None


### Command-line args
if len(sys.argv) != 4:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Attacking_Pokemon_Name = helpers.clean(sys.argv[1])
Defending_Pokemon_Name = helpers.clean(sys.argv[2])
Pokemon_Game_Name      = helpers.clean(sys.argv[3])




def main():
    # TODO: YOUR CODE HERE
    if db is None:
        print('DB not found', file=sys.stderr)
        sys.exit(1)

    function_definition = (
        "CREATE OR REPLACE FUNCTION damage_calc_formula("
        "atker_level Numeric, atk_power Numeric, atker_atk Numeric, "
        "atker_spatk Numeric, dfnder_dfn Numeric, dfnder_spdfn Numeric, "
        "random_factor Numeric, atker_type_1 Integer, atker_type_2 Integer, "
        "dfnder_type_1 Integer, dfnder_type_2 Integer, move_type Integer, "
        "move_category move_categories) RETURNS Integer AS $$\n"
        "DECLARE\n"
        "  damage_output Numeric;\n"
        "  level_component Numeric;\n"
        "  stat_component Numeric;\n"
        "  type_eff Numeric;\n"
        "  STAB Numeric;\n"
        "  mult Numeric;\n"
        "BEGIN\n"
        "  IF move_type = atker_type_1 OR move_type = atker_type_2 THEN\n"
        "    STAB := 1.5;\n"
        "  ELSE\n"
        "    STAB := 1.0;\n"
        "  END IF;\n\n"
        "  type_eff := 1.0;\n"
        "  FOR mult IN SELECT multiplier\n"
        "  FROM Type_Effectiveness\n"
        "  WHERE attacking = move_type\n"
        "  AND (\n"
        "    defending = dfnder_type_1\n"
        "    OR\n"
        "    defending = dfnder_type_2\n"
        "  )\n"
        "    LOOP\n"
        "      type_eff := type_eff * mult / 100.0;\n"
        "    END LOOP;\n\n"
        "  level_component := (((2.0 * atker_level) / 5.0) + 2.0);\n"
        "  IF move_category = 'Special' THEN\n"
        "    stat_component := atk_power * atker_spatk / dfnder_spdfn;\n"
        "  ELSE\n"
        "    stat_component := atk_power * atker_atk / dfnder_dfn;\n"
        "  END IF;\n\n"
        "  damage_output := ((level_component * stat_component) / 50.0) + 2.0;\n"
        "  damage_output := damage_output * random_factor * STAB * type_eff;\n\n"
        "  RETURN TRUNC(ROUND(damage_output::Numeric, 1));\n"
        "END;\n"
        "$$ LANGUAGE plpgsql;"
    )

    with db.cursor() as cur:
        cur.execute(function_definition)
        db.commit()

    with db.cursor() as cur:

        # Check if the game exists in the database
        check_game_query = "SELECT id FROM Games WHERE name = %s;"
        cur.execute(check_game_query, (Pokemon_Game_Name, ))
        if cur.fetchone() is None:
            print(f"'Pokemon {Pokemon_Game_Name}' isn't a game in the Pokemon series.", file=sys.stderr)
            sys.exit(1)

        # Check and process attacker and defender
        for poke_name in [Attacking_Pokemon_Name, Defending_Pokemon_Name]:
            poke_query = """
                SELECT p.id, p.name, p.first_type, p.second_type, p.base_stats
                FROM Pokemon AS p
                WHERE name = %s;
            """
            cur.execute(poke_query, (poke_name, ))
            result = cur.fetchall()

            if len(result) < 1:
                print(f"'{poke_name}' isn't a Pokemon that exists.", file=sys.stderr)
                sys.exit(1)
            else:
                result = result[0]
                result_stats = result[4]
                result_stats = result_stats[1:-1].split(',')
                stat_keys = ['hp', 'atk', 'dfn', 'spatk', 'spdfn', 'spd']
                result_stats = {stat_keys[i]: result_stats[i] for i in range(min(len(stat_keys), len(result_stats)))}


                if poke_name == Attacking_Pokemon_Name:
                    atker, atker_stats = result, result_stats
                else:
                    dfnder, dfnder_stats = result, result_stats

            # Check if pokemon exists in the given game
            check_poke_in_game_query = """
                SELECT p.Game
                FROM Pokedex AS p
                JOIN Pokemon AS k ON p.National_ID = k.id
                JOIN Games AS g ON p.Game = g.id
                WHERE g.name = %s AND k.name = %s;
            """


            cur.execute(check_poke_in_game_query, (Pokemon_Game_Name, poke_name))
            if cur.fetchone() is None:
                print(f"'{poke_name}' doesn't appear in 'Pokemon {Pokemon_Game_Name}'.", file=sys.stderr)
                sys.exit(1)

        # query usable moves and calculate using formula (find plpgsql function in helpers.sql).
        poke_constant_stats = (
            atker_stats['atk'], atker_stats['spatk'],
            dfnder_stats['dfn'], dfnder_stats['spdfn'],
            *[atker[i] for i in range(2,4)],
            *[dfnder[i] for i in range(2,4)]
        )



        attacks_query = """
            SELECT DISTINCT * FROM
            (
                SELECT
                m.id,
                m.name,
                damage_calc_formula(1, m.power, %s, %s, %s, %s, 0.85, %s, %s, %s, %s, m.of_type, m.category) AS dmin,
                damage_calc_formula(100, m.power, %s, %s, %s, %s, 1.00, %s, %s, %s, %s, m.of_type, m.category) AS dmax
                FROM Moves AS m
                INNER JOIN (
                    SELECT learnt_by, learnt_in, learns
                    FROM Learnable_moves
                    WHERE learnt_by = (
                        SELECT id FROM Pokemon WHERE name = %s
                    ) AND learnt_in = (
                        SELECT id FROM Games WHERE name = %s
                    )
                ) AS lm ON m.id = lm.learns
                WHERE m.power is not Null
                    AND m.category != 'Status'
            ) AS q
            WHERE q.dmax != 0
            ORDER BY q.dmax, q.dmin, q.name;
        """
        cur.execute(attacks_query,
            poke_constant_stats + poke_constant_stats + (Attacking_Pokemon_Name, Pokemon_Game_Name)
        )

        moves = cur.fetchall()

    # if no usable moves
    if len(moves) < 1:
        output_string = f"In 'Pokemon {Pokemon_Game_Name}', '{Attacking_Pokemon_Name}' can't attack '{Defending_Pokemon_Name}'."
        print(output_string)
        sys.exit(0)

    # otherwise print moves
    output_string = f"In 'Pokemon {Pokemon_Game_Name}', When '{Attacking_Pokemon_Name}' attacks '{Defending_Pokemon_Name}',"
    output_string += f"'{Attacking_Pokemon_Name}' can use the following moves:\n\n"

    for r in moves:
        output_string += f"\t'{r[1]}' for a minimum of {r[2]} damage and a maximum of {r[3]} damage to '{Defending_Pokemon_Name}'.\n"

    print(output_string)
    sys.exit(0)



if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
